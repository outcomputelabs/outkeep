<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_CacheEntryFor_X_AlreadyHasARegisteredCallback" xml:space="preserve">
    <value>Cache entry for key {0} already has a registered callback</value>
  </data>
  <data name="Exception_CacheEntryFor_X_IsCommittedAndDoesNotAllowThisOperation" xml:space="preserve">
    <value>Cache entry for key {0} is comitted and does not allow this operation</value>
  </data>
  <data name="Exception_CacheEntryFor_X_IsUncommittedAndDoesNotAllowThisOperation" xml:space="preserve">
    <value>Cache entry for key {0} is uncomitted and does not allow this operation</value>
  </data>
  <data name="Exception_CacheEntryFor_X_MustHaveSizeGreaterThanZero" xml:space="preserve">
    <value>The cache entry for key {0} must have a size greater than zero</value>
  </data>
  <data name="Exception_CacheEntryFor_X_MustHaveSizeLesserThanOrEqualCapacityOf_X" xml:space="preserve">
    <value>The cache entry for key {0} must have a size lesser than or equal capacity of {1}</value>
  </data>
  <data name="Exception_CacheFile_X_ContainsKey_X_YetWeExpected_X" xml:space="preserve">
    <value>Cache file {0} contains key {1} yet we expected {2}</value>
  </data>
  <data name="Exception_CacheFile_X_ContainsNullKey_YetWeExpected_X" xml:space="preserve">
    <value>Cache file {0} contains null key yet we expected {1}</value>
  </data>
  <data name="Exception_CacheFile_X_DoesNotContainExpectedKey_X" xml:space="preserve">
    <value>Cache file {0} does not contain expected key {1}</value>
  </data>
  <data name="Exception_CacheFile_X_ForKey_X_DoesNotContainValue" xml:space="preserve">
    <value>Cache file {0} does not contain a value</value>
  </data>
  <data name="Exception_CacheKey_X_IsNotValidForThisStorageProvider" xml:space="preserve">
    <value>The cache key {0} is not valid for this storage provider.</value>
  </data>
  <data name="Exception_CacheStorageOptions_StorageDirectory_MustBeConfigured" xml:space="preserve">
    <value>StorageDirectory must be configured</value>
  </data>
  <data name="Exception_CacheStorageOptions_StorageDirectory_X_IsNotWellAbsoluteFormed" xml:space="preserve">
    <value>StorageDirectory {0} is not a well formed absolute URI</value>
  </data>
  <data name="Exception_CannotCompareProperties_X_And_X" xml:space="preserve">
    <value>Cannot compare properties {0} and {1}</value>
  </data>
  <data name="Exception_CannotExecuteStorageOperationBecauseThePriorOperationFailed" xml:space="preserve">
    <value>Cannot execute batched storage operation because the prior operation failed</value>
  </data>
  <data name="Exception_CannotFindAPublicInstancePropertyNamed_X" xml:space="preserve">
    <value>Cannot find a public instance property named {0}</value>
  </data>
  <data name="Exception_ConditionForType_X_WithValue_X_IsNotSupported" xml:space="preserve">
    <value>Condition for type {0} with value {1} is not supported</value>
  </data>
  <data name="Exception_CouldNotOpenADynamicPortForExclusiveUse" xml:space="preserve">
    <value>Could not open a dynamic port for exclusive use</value>
  </data>
  <data name="Exception_CurrentETag_X_DoesNotMatchStoredETag_X" xml:space="preserve">
    <value>Current ETag {0} does not match stored ETag {1}</value>
  </data>
  <data name="Exception_FailedToClearCacheFile_X_ForKey_X" xml:space="preserve">
    <value>Failed to clear cache file {0} for key {1}</value>
  </data>
  <data name="Exception_FailedToReadCacheFile" xml:space="preserve">
    <value>Failed to read cache file</value>
  </data>
  <data name="Exception_FailedToWriteCacheFile_X_For_Key_X" xml:space="preserve">
    <value>Failed to write cache file '{0}' for key '{1}'</value>
  </data>
  <data name="Exception_NoResourceGovernorNamed_X_FoundForGrainType_X" xml:space="preserve">
    <value>No Resource Governor named {0} found for grain type {1}</value>
  </data>
  <data name="Exception_Property_X_MustImplementIComparable" xml:space="preserve">
    <value>Property {0} must implement IComparable</value>
  </data>
  <data name="Exception_Property_X_ValueMustNotBeNull" xml:space="preserve">
    <value>Property {0} value must not be null</value>
  </data>
  <data name="Exception_Property_X_WithValue_X_MustBeGreaterThanOrEqualToProperty_X_WithValue_X" xml:space="preserve">
    <value>Property {0} with value {1} must be greater than or equal to {2} with value {3}</value>
  </data>
  <data name="Exception_ThereAreNoFreePortsWithinTheInputRange" xml:space="preserve">
    <value>There are no free ports within the input range</value>
  </data>
  <data name="Exception_UnexpectedEndpointType" xml:space="preserve">
    <value>Unexpected endpoint type</value>
  </data>
  <data name="Log_AttemptingToDeactivate_X_GrainsOutOf_X_InResponseToMemoryPressure" xml:space="preserve">
    <value>Attempting to deactivate {Count} grains out of {Total} in response to memory pressure</value>
  </data>
  <data name="Log_CacheDirectorCannotCompactToTargetSizeOf_X" xml:space="preserve">
    <value>The cache director could not compact the cache to target capacity of {Size}</value>
  </data>
  <data name="Log_CacheFile_X_ForKey_X_NotFound" xml:space="preserve">
    <value>Cache file {Path} for key {Key} not found</value>
  </data>
  <data name="Log_CompletedOvercapacityCompactionWithSizeOf_X" xml:space="preserve">
    <value>Completed overcapacity compaction with final size of {Size}</value>
  </data>
  <data name="Log_DeletedCacheFile_X_ForKey_X" xml:space="preserve">
    <value>Deleted cache file {Path} for key {Key}</value>
  </data>
  <data name="Log_Echo_X" xml:space="preserve">
    <value>Echo {Message}</value>
  </data>
  <data name="Log_EvictionCallbackForKey_X_WithCause_X_Failed" xml:space="preserve">
    <value>The eviction callback for key {Key} and cause {Cause} failed</value>
  </data>
  <data name="Log_FailedOperationOnCacheFile_X_ForKey_X" xml:space="preserve">
    <value>Failed operation on cache file {Path} for key {Key}</value>
  </data>
  <data name="Log_FailedToDeactivateTargetGrain_X" xml:space="preserve">
    <value>Failed to deactivate target grain {GrainReference}</value>
  </data>
  <data name="Log_FailedToDeactivateTargetGrain_X_After_X_AttemptsWillNotRetry" xml:space="preserve">
    <value>Failed to deactivate target grain {GrainReference} after {MaxAttempts} attempts. Will not retry.</value>
  </data>
  <data name="Log_ReadCacheFile_X_ForKey_X_WithValueSizeOf_X_Bytes" xml:space="preserve">
    <value>Read cache file {Path} for key {Key} with value size of {Size} bytes</value>
  </data>
  <data name="Log_SchedulingOvercapacityCompaction" xml:space="preserve">
    <value>Scheduling overcapacity compaction</value>
  </data>
  <data name="Log_StartingOvercapacityCompactionWithSizeOf_X" xml:space="preserve">
    <value>Starting overcapacity compaction with current size of {Size}</value>
  </data>
  <data name="Log_TimerTickHasFaulted" xml:space="preserve">
    <value>A timer tick has faulted</value>
  </data>
  <data name="Log_TimerTickWasCancelled" xml:space="preserve">
    <value>A timer tick was cancelled</value>
  </data>
  <data name="Log_WroteCacheFile_X_ForKey_X_WithValueSizeOf_X_Bytes" xml:space="preserve">
    <value>Wrote cache file {Path} for key {Key} with value size of {Size} bytes</value>
  </data>
</root>